#!/bin/bash
# run-expr-all

usage()
{

   echo "usage: run-expr-all [-hfpD] [-P parallel-code] [-i id] [-n nice] [-c count] [-F fitness-type] <results-name>" >&2;
   exit 2;
}

parallel=0;
force=0;
num=1;
count=1;
fitnessType=0;
nice=0;
options="";
ltypes="0 1";
ttypes="1 2 3 4";
btypes="An Bn Ap Bp Ao Bo";
dryrun=0;
while getopts hfpc:i:F:n:P:L:T:B: opt; do
	case $opt in
	    f) force=1;options="-f ";;
        L) ltypes="$OPTARG";;
        T) ttypes="$OPTARG";;
        B) btypes="$OPTARG";;
        P) parallel=$OPTARG;;
	    p) parallel=1;;
        h) usage;;
	    c) count=$OPTARG;;
        i) num=$OPTARG;;
        F) fitnessType=$OPTARG;;
	    n) nice=$OPTARG;;
	    *) echo "error: invalid option given." >&2; usage;;
	esac
done
shift $[ OPTIND - 1 ]

if [ "$options" != "" ]; then
    options="-$options";
fi

if [ $# -ne 1 ]; then
    usage;
fi

for ((i = $num; i < ($num + $count); i++)); do 
    for target in $ttypes; do
	    for lobotomise in $ltypes; do
            for exp in $btypes; do
                if [ $parallel -eq 0 ]; then
		            if ! run-expr $options -F $fitnessType -i $i -c 1 -d "$1" $exp $target $lobotomise; then
                        echo "error: run-expr exited with error code ${PIPESTATUS}" >&2;
                        exit 1;
		            fi
                elif [ $parallel -eq 1 ]; then
                    run-expr $options -P 2 -F $fitnessType -i $i -c 1 -d "$1" $exp $target $lobotomise &
                elif [ $parallel -eq 2 ]; then
                    echo "run-expr $options -P 2 -F $fitnessType -i $i -c 1 -d $1 $exp $target $lobotomise"
                else 
                    echo "error: unknown parallel code: $parallel" >&2;
                    exit 3;
                fi
            done
	    done
    done
    if [ $parallel -eq 1 ]; then
        echo "run-expr-all: Waiting for jobs to finish for run $i before starting new ones."
        wait
    fi
done
